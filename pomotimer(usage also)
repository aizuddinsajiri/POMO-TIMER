import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, Toplevel
from tracker import UsageTracker  # Assuming tracker.py is in the same directory
import pygame  # Import pygame for sound
import os

class PomodoroApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Pomodoro Timer with Usage Tracker")
        self.geometry("600x650")  # Adjusted height to accommodate tracking features
        self.configure(bg="#fff5f5")

        # Initialize pygame mixer for sound
        pygame.mixer.init()
        self.music_playing = True
        self.play_background_music("background_music.mp3")

        # Timer settings
        self.default_focus_time = 25  # in minutes
        self.default_break_time = 5   # in minutes
        self.focus_time = self.default_focus_time
        self.break_time = self.default_break_time
        self.timer_running = False
        self.is_break = False

        # Initialize tracker
        self.tracker = None

        # Tabs
        self.tab_control = ttk.Notebook(self)
        self.pomodoro_tab = ttk.Frame(self.tab_control)
        self.customize_tab = ttk.Frame(self.tab_control)
        self.usage_tracker_tab = ttk.Frame(self.tab_control)  # New Usage Tracker Tab
        self.tab_control.add(self.pomodoro_tab, text='Pomodoro')
        self.tab_control.add(self.customize_tab, text='Customize')
        self.tab_control.add(self.usage_tracker_tab, text='Usage Tracker')  # Add new tab
        self.tab_control.pack(expand=1, fill="both")

        self.create_pomodoro_tab()
        self.create_customize_tab()
        self.create_usage_tracker_tab()  # New tab for tracker

        # Button Frame for mute and exit
        self.button_frame = tk.Frame(self, bg="#fff5f5")
        self.button_frame.pack(pady=10)

        # Mute/Unmute Button
        self.mute_button = tk.Button(self.button_frame, text="Mute", command=self.toggle_music, font=("Arial", 10),
                                     bg="#ff6b6b", fg="white", relief="flat", width=10)
        self.mute_button.pack(side="left", padx=5)

        # Exit Button
        self.exit_button = tk.Button(self.button_frame, text="Exit", command=self.quit, font=("Arial", 10),
                                     bg="#ff6b6b", fg="white", relief="flat", width=10)
        self.exit_button.pack(side="left", padx=5)

    def create_pomodoro_tab(self):
        self.timer_label = tk.Label(self.pomodoro_tab, text=f"{self.focus_time:02}:00.00", font=("Arial", 24),
                                    bg="#fff5f5", fg="#ff6b6b")
        self.timer_label.pack(pady=20)

        self.quote_label = tk.Label(self.pomodoro_tab, text="Time to focus", font=("Arial", 16), bg="#fff5f5",
                                    fg="#4a4a4a")
        self.quote_label.pack(pady=10)

        self.start_stop_button = tk.Button(self.pomodoro_tab, text="Start", command=self.start_stop_timer,
                                           font=("Arial", 12), bg="#ff6b6b", fg="white", relief="flat", width=10)
        self.start_stop_button.pack(pady=20)
        self.reset_timer()

    def create_customize_tab(self):
        self.default_var = tk.BooleanVar(value=True)

        self.default_check = tk.Checkbutton(self.customize_tab, text="Default 25m/5m Pomodoro",
                                            variable=self.default_var, command=self.toggle_customization,
                                            font=("Arial", 12), bg="#fff5f5", fg="#4a4a4a")
        self.default_check.pack(pady=10)

        self.custom_frame = tk.Frame(self.customize_tab, bg="#fff5f5")
        self.custom_frame.pack()

        self.long_break_label = tk.Label(self.custom_frame, text="Focus Time (minutes):", font=("Arial", 12),
                                         bg="#fff5f5", fg="#4a4a4a")
        self.long_break_label.grid(row=0, column=0, padx=5, pady=5)
        self.long_break_entry = tk.Entry(self.custom_frame, state="disabled", font=("Arial", 12))
        self.long_break_entry.grid(row=0, column=1, padx=5, pady=5)

        self.short_break_label = tk.Label(self.custom_frame, text="Break Time (minutes):", font=("Arial", 12),
                                          bg="#fff5f5", fg="#4a4a4a")
        self.short_break_label.grid(row=1, column=0, padx=5, pady=5)
        self.short_break_entry = tk.Entry(self.custom_frame, state="disabled", font=("Arial", 12))
        self.short_break_entry.grid(row=1, column=1, padx=5, pady=5)

        self.save_button = tk.Button(self.customize_tab, text="Save", command=self.save_custom_times,
                                     font=("Arial", 12), bg="#ff6b6b", fg="white", relief="flat", width=10)
        self.save_button.pack(pady=10)

    def create_usage_tracker_tab(self):
        """Create elements for the usage tracker tab"""
        self.tracking_frame = tk.Frame(self.usage_tracker_tab, bg="#fff5f5")
        self.tracking_frame.pack(pady=10)

        self.start_tracking_button = tk.Button(self.tracking_frame, text="Start Tracking", command=self.start_tracking,
                                               font=("Arial", 12), bg="#ff6b6b", fg="white", relief="flat", width=20)
        self.start_tracking_button.pack(side="left", padx=5)

        self.stop_tracking_button = tk.Button(self.tracking_frame, text="Stop Tracking", command=self.stop_tracking, 
                                              state=tk.DISABLED, font=("Arial", 12), bg="#ff6b6b", fg="white", relief="flat", width=20)
        self.stop_tracking_button.pack(side="left", padx=5)

        self.view_history_button = tk.Button(self.tracking_frame, text="View History", command=self.view_history,
                                             font=("Arial", 12), bg="#ff6b6b", fg="white", relief="flat", width=20)
        self.view_history_button.pack(side="left", padx=5)

        self.clear_history_button = tk.Button(self.tracking_frame, text="Clear History", command=self.clear_history,
                                              font=("Arial", 12), bg="#ff6b6b", fg="white", relief="flat", width=20)
        self.clear_history_button.pack(side="left", padx=5)

        # Add scrolled text widget for displaying the usage log
        self.history_display = scrolledtext.ScrolledText(self.usage_tracker_tab, width=70, height=20, font=("Arial", 12))
        self.history_display.pack(pady=10)

    def start_tracking(self):
        if self.tracker is None or not self.tracker.is_alive():
            self.tracker = UsageTracker(filename="usage_log.txt")  # Assuming UsageTracker is implemented in tracker.py
            self.tracker.start_tracking()
            self.start_tracking_button.config(state=tk.DISABLED)
            self.stop_tracking_button.config(state=tk.NORMAL)
            self.update_usage_log()

    def stop_tracking(self):
        if self.tracker:
            self.tracker.stop_tracking()
            self.start_tracking_button.config(state=tk.NORMAL)
            self.stop_tracking_button.config(state=tk.DISABLED)
            self.save_session_to_history()

    def view_history(self):
        """View the log directly in the text widget on the Usage Tracker tab."""
        self.history_display.config(state=tk.NORMAL)
        self.history_display.delete(1.0, tk.END)

        try:
            with open("history_log.txt", "r") as history_file:
                history_data = history_file.read()
                self.history_display.insert(tk.END, history_data)
        except FileNotFoundError:
            self.history_display.insert(tk.END, "No history found.")

        self.history_display.config(state=tk.DISABLED)

    def save_session_to_history(self):
        """Save the current log session to a history file."""
        try:
            with open("usage_log.txt", "r") as current_session_file:
                session_data = current_session_file.read()
                if session_data:  # Only save if there's data
                    with open("history_log.txt", "a") as history_file:
                        history_file.write("\n--- New Session ---\n")
                        history_file.write(session_data)
        except FileNotFoundError:
            pass

    def update_usage_log(self):
        """Update the usage log display in real-time."""
        self.history_display.config(state=tk.NORMAL)
        self.history_display.delete(1.0, tk.END)

        try:
            with open("usage_log.txt", "r") as log_file:
                log_data = log_file.read()
                self.history_display.insert(tk.END, log_data)
        except FileNotFoundError:
            self.history_display.insert(tk.END, "No usage data found.")

        self.history_display.config(state=tk.DISABLED)

        if self.tracker and self.tracker.is_alive():
            self.after(1000, self.update_usage_log)

    def clear_history(self):
        """Clear the contents of the history log."""
        if messagebox.askyesno("Clear History", "Are you sure you want to clear the history?"):
            with open("history_log.txt", "w"):
                pass
            self.view_history()

    def toggle_music(self):
        if self.music_playing:
            pygame.mixer.music.pause()
            self.mute_button.config(text="Unmute")
        else:
            pygame.mixer.music.unpause()
            self.mute_button.config(text="Mute")
        self.music_playing = not self.music_playing

    def play_background_music(self, music_file):
        pygame.mixer.music.load(music_file)
        pygame.mixer.music.play(-1)

    def reset_timer(self):
        self.timer_label.config(text=f"{self.focus_time:02}:00")
        self.quote_label.config(text="Time to focus")

    def start_stop_timer(self):
        self.timer_running = not self.timer_running
        self.start_stop_button.config(text="Stop" if self.timer_running else "Start")
        if self.timer_running:
            self.run_timer(self.focus_time * 60)

    def run_timer(self, remaining_time):
        if remaining_time <= 0:
            self.is_break = not self.is_break
            self.reset_timer()
            self.play_alarm_sound()
            self.quote_label.config(text="Take a break!" if self.is_break else "Time to focus")
            self.run_timer(self.break_time * 60 if self.is_break else self.focus_time * 60)
        elif self.timer_running:
            mins, secs = divmod(remaining_time, 60)
            self.timer_label.config(text=f"{mins:02}:{secs:02}")
            self.after(1000, self.run_timer, remaining_time - 1)

    def play_alarm_sound(self):
        pygame.mixer.Sound("alarm_sound.mp3").play()

    def toggle_customization(self):
        state = "disabled" if self.default_var.get() else "normal"
        self.long_break_entry.config(state=state)
        self.short_break_entry.config(state=state)

    def save_custom_times(self):
        if not self.default_var.get():
            try:
                self.focus_time = int(self.long_break_entry.get())
                self.break_time = int(self.short_break_entry.get())
                self.reset_timer()
            except ValueError:
                messagebox.showerror("Invalid input", "Please enter valid numbers for the times.")


if __name__ == "__main__":
    app = PomodoroApp()
    app.mainloop()
